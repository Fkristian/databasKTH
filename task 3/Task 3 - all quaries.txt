select date_trunc('month', ml.time), count(ml.id) as lessons, sum(case (ld.type) when ('individual') then 1 else 0 end) as indivdual
	, count(case when (ld.type = 'group') then ld.type else null end) as group, count(e.genre) as ensamble
from music_lesson ml
left outer join lesson_details ld on ml.id = ld.music_lesson_id
left outer join ensamble e on ml.id = e.music_lesson_id
where extract(year from ml.time) = 2017
group by date_trunc('month', ml.time)
order by date_trunc('month', ml.time)
;

select sum(lessons)/12 as total, sum(indivdual_lesson)/12 as indivdual_lesson, sum(group_lesson)/12 as group_lesson, sum(ensamble)/12 as ensamble from
(select date_trunc('month', ml.time), count(ml.id) as lessons, sum(case (ld.type) when ('individual') then 1 else 0 end) as indivdual_lesson
    , count(case when (ld.type = 'group') then ld.type else null end) as group_lesson, count(e.genre) as ensamble
from music_lesson ml
left outer join lesson_details ld on ml.id = ld.music_lesson_id
left outer join ensamble e on ml.id = e.music_lesson_id
where extract(year from ml.time) = 2017
group by date_trunc('month', ml.time)
order by date_trunc('month', ml.time)
) as f
;

select * from
                    (Select instructor_id, count(*)
                    from instructor join music_lesson ml on instructor.id = ml.instructor_id
                    where extract(month from time) = extract(month from current_date) and extract(year from time) = extract(year from current_date)
                    group by instructor_id) as f
where count > 2
order by count desc
;


select e.music_lesson_id, time, genre,
CASE WHEN maximum_number_of_students :: int - count(e.music_lesson_id) > 2 THEN 'More then 2 spots open'
WHEN maximum_number_of_students :: int - count(e.music_lesson_id) = 1 or maximum_number_of_students  :: int - count(e.music_lesson_id) = 2 THEN 'There is 1 to 2 spots open'
ELSE 'Full booked'
END AS QuantityText
FROM music_lesson join ensamble e on music_lesson.id = e.music_lesson_id join student_music_lesson sml on music_lesson.id = sml.music_lesson_id
where time > current_date + cast(abs(extract(dow FROM current_date) - 7) + 1 AS int) group by e.music_lesson_id, time
order by genre, time;

datagrip
